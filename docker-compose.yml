services:
  # Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    platform: linux/arm64
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kvd_network

  # Redis for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - kvd_network

  # Database initialization
  init-db:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    command: python -m src.utils.init_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kvd_network

  # Ollama LLM service - using a smaller model better for Mac M4
  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      # Set low context window for better performance on Mac
      - OLLAMA_CONTEXT_LENGTH=2048
    ports:
      - "11434:11434"
    # Important: No health check to avoid timeouts
    networks:
      - kvd_network
    # We're using CPU only mode, but give it some time to initialize
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Scraper service - runs immediately and then hourly
  scraper:
    build:
      context: .
      dockerfile: Dockerfile.scraper
    command: python -m src.scraper.scraper_service immediate
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./logs:/app/logs
      - ./src/scraper:/app/src/scraper
    depends_on:
      init-db:
        condition: service_completed_successfully
    networks:
      - kvd_network

  # Initialize Ollama model with tinyllama (a small model good for Macs)
  model-init:
    image: curlimages/curl:latest
    # Simplified retry approach
    command: |
      sh -c '
      echo "Waiting for Ollama to be ready..."
      for i in {1..30}; do
        if curl -s http://ollama:11434/api/tags > /dev/null; then
          echo "Ollama is ready. Pulling model..."
          curl -X POST http://ollama:11434/api/pull -d "{\"name\":\"${OLLAMA_MODEL:-tinyllama}\"}"
          echo "Model initialization completed."
          exit 0
        fi
        echo "Waiting for Ollama API... (attempt $$i/30)"
        sleep 10
      done
      echo "Timed out waiting for Ollama"
      exit 1
      '
    environment:
      - OLLAMA_MODEL=${OLLAMA_MODEL:-tinyllama}
    depends_on:
      - ollama
    networks:
      - kvd_network

  # AI assistant service
  ai-assistant:
    build:
      context: .
      dockerfile: Dockerfile.ai
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-tinyllama}
    ports:
      - "8001:8001"
    depends_on:
      - ollama
      - model-init
      - postgres
    volumes:
      - ./src/ai:/app/src/ai
      - ./logs:/app/logs
    networks:
      - kvd_network

  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - AI_ASSISTANT_HOST=${AI_ASSISTANT_HOST:-ai-assistant}
      - AI_ASSISTANT_PORT=${AI_ASSISTANT_PORT:-8001}
    depends_on:
      - postgres
      - redis
      - ai-assistant
    networks:
      - kvd_network
      
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - kvd_network

  # Backup service
  backup:
    image: postgres:15
    volumes:
      - ./backup:/backup
      - ${NAS_BACKUP_PATH:-/Volumes/FamilyFiles/postgres-backup}:${NAS_BACKUP_PATH:-/Volumes/FamilyFiles/postgres-backup}
      - ./backup.sh:/backup.sh
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - NAS_BACKUP_PATH=${NAS_BACKUP_PATH:-/Volumes/FamilyFiles/postgres-backup}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
    command: bash -c "chmod +x /backup.sh && echo 'Setting up scheduled backup with cron...' && (crontab -l 2>/dev/null || echo '') | echo \"${BACKUP_SCHEDULE:-0 0 * * *} /backup.sh >> /backup/cron.log 2>&1\" | crontab - && crond -f"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kvd_network

volumes:
  postgres_data:
  redis_data:
  ollama_data:

networks:
  kvd_network:
    driver: bridge